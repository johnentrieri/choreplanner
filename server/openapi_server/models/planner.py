from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.performer import Performer
from openapi_server.models.task_instance import TaskInstance
from openapi_server.models.task_rule import TaskRule
from openapi_server import util

from openapi_server.models.performer import Performer  # noqa: E501
from openapi_server.models.task_instance import TaskInstance  # noqa: E501
from openapi_server.models.task_rule import TaskRule  # noqa: E501

class Planner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, planner_id=None, num_weeks=None, start_date=None, performers=None, task_rules=None, tasks=None):  # noqa: E501
        """Planner - a model defined in OpenAPI

        :param planner_id: The planner_id of this Planner.  # noqa: E501
        :type planner_id: int
        :param num_weeks: The num_weeks of this Planner.  # noqa: E501
        :type num_weeks: int
        :param start_date: The start_date of this Planner.  # noqa: E501
        :type start_date: date
        :param performers: The performers of this Planner.  # noqa: E501
        :type performers: List[Performer]
        :param task_rules: The task_rules of this Planner.  # noqa: E501
        :type task_rules: List[TaskRule]
        :param tasks: The tasks of this Planner.  # noqa: E501
        :type tasks: List[TaskInstance]
        """
        self.openapi_types = {
            'planner_id': int,
            'num_weeks': int,
            'start_date': date,
            'performers': List[Performer],
            'task_rules': List[TaskRule],
            'tasks': List[TaskInstance]
        }

        self.attribute_map = {
            'planner_id': 'plannerID',
            'num_weeks': 'numWeeks',
            'start_date': 'startDate',
            'performers': 'performers',
            'task_rules': 'taskRules',
            'tasks': 'tasks'
        }

        self._planner_id = planner_id
        self._num_weeks = num_weeks
        self._start_date = start_date
        self._performers = performers
        self._task_rules = task_rules
        self._tasks = tasks

    @classmethod
    def from_dict(cls, dikt) -> 'Planner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Planner of this Planner.  # noqa: E501
        :rtype: Planner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def planner_id(self) -> int:
        """Gets the planner_id of this Planner.

        Planner ID  # noqa: E501

        :return: The planner_id of this Planner.
        :rtype: int
        """
        return self._planner_id

    @planner_id.setter
    def planner_id(self, planner_id: int):
        """Sets the planner_id of this Planner.

        Planner ID  # noqa: E501

        :param planner_id: The planner_id of this Planner.
        :type planner_id: int
        """

        self._planner_id = planner_id

    @property
    def num_weeks(self) -> int:
        """Gets the num_weeks of this Planner.

        Total Number of Weeks  # noqa: E501

        :return: The num_weeks of this Planner.
        :rtype: int
        """
        return self._num_weeks

    @num_weeks.setter
    def num_weeks(self, num_weeks: int):
        """Sets the num_weeks of this Planner.

        Total Number of Weeks  # noqa: E501

        :param num_weeks: The num_weeks of this Planner.
        :type num_weeks: int
        """
        if num_weeks is not None and num_weeks > 104:  # noqa: E501
            raise ValueError("Invalid value for `num_weeks`, must be a value less than or equal to `104`")  # noqa: E501
        if num_weeks is not None and num_weeks < 1:  # noqa: E501
            raise ValueError("Invalid value for `num_weeks`, must be a value greater than or equal to `1`")  # noqa: E501

        self._num_weeks = num_weeks

    @property
    def start_date(self) -> date:
        """Gets the start_date of this Planner.

        Planner Starting Date  # noqa: E501

        :return: The start_date of this Planner.
        :rtype: date
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: date):
        """Sets the start_date of this Planner.

        Planner Starting Date  # noqa: E501

        :param start_date: The start_date of this Planner.
        :type start_date: date
        """

        self._start_date = start_date

    @property
    def performers(self) -> List[Performer]:
        """Gets the performers of this Planner.


        :return: The performers of this Planner.
        :rtype: List[Performer]
        """
        return self._performers

    @performers.setter
    def performers(self, performers: List[Performer]):
        """Sets the performers of this Planner.


        :param performers: The performers of this Planner.
        :type performers: List[Performer]
        """

        self._performers = performers

    @property
    def task_rules(self) -> List[TaskRule]:
        """Gets the task_rules of this Planner.


        :return: The task_rules of this Planner.
        :rtype: List[TaskRule]
        """
        return self._task_rules

    @task_rules.setter
    def task_rules(self, task_rules: List[TaskRule]):
        """Sets the task_rules of this Planner.


        :param task_rules: The task_rules of this Planner.
        :type task_rules: List[TaskRule]
        """

        self._task_rules = task_rules

    @property
    def tasks(self) -> List[TaskInstance]:
        """Gets the tasks of this Planner.


        :return: The tasks of this Planner.
        :rtype: List[TaskInstance]
        """
        return self._tasks

    @tasks.setter
    def tasks(self, tasks: List[TaskInstance]):
        """Sets the tasks of this Planner.


        :param tasks: The tasks of this Planner.
        :type tasks: List[TaskInstance]
        """

        self._tasks = tasks
