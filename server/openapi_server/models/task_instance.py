from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class TaskInstance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, task_id=None, summary=None, start_week=None, assignee=None, status=None, finish_date=None):  # noqa: E501
        """TaskInstance - a model defined in OpenAPI

        :param task_id: The task_id of this TaskInstance.  # noqa: E501
        :type task_id: int
        :param summary: The summary of this TaskInstance.  # noqa: E501
        :type summary: str
        :param start_week: The start_week of this TaskInstance.  # noqa: E501
        :type start_week: int
        :param assignee: The assignee of this TaskInstance.  # noqa: E501
        :type assignee: str
        :param status: The status of this TaskInstance.  # noqa: E501
        :type status: str
        :param finish_date: The finish_date of this TaskInstance.  # noqa: E501
        :type finish_date: date
        """
        self.openapi_types = {
            'task_id': int,
            'summary': str,
            'start_week': int,
            'assignee': str,
            'status': str,
            'finish_date': date
        }

        self.attribute_map = {
            'task_id': 'taskID',
            'summary': 'summary',
            'start_week': 'startWeek',
            'assignee': 'assignee',
            'status': 'status',
            'finish_date': 'finishDate'
        }

        self._task_id = task_id
        self._summary = summary
        self._start_week = start_week
        self._assignee = assignee
        self._status = status
        self._finish_date = finish_date

    @classmethod
    def from_dict(cls, dikt) -> 'TaskInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaskInstance of this TaskInstance.  # noqa: E501
        :rtype: TaskInstance
        """
        return util.deserialize_model(dikt, cls)

    @property
    def task_id(self) -> int:
        """Gets the task_id of this TaskInstance.

        Task ID  # noqa: E501

        :return: The task_id of this TaskInstance.
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id: int):
        """Sets the task_id of this TaskInstance.

        Task ID  # noqa: E501

        :param task_id: The task_id of this TaskInstance.
        :type task_id: int
        """

        self._task_id = task_id

    @property
    def summary(self) -> str:
        """Gets the summary of this TaskInstance.


        :return: The summary of this TaskInstance.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary: str):
        """Sets the summary of this TaskInstance.


        :param summary: The summary of this TaskInstance.
        :type summary: str
        """
        if summary is not None and len(summary) > 64:
            raise ValueError("Invalid value for `summary`, length must be less than or equal to `64`")  # noqa: E501
        if summary is not None and len(summary) < 3:
            raise ValueError("Invalid value for `summary`, length must be greater than or equal to `3`")  # noqa: E501

        self._summary = summary

    @property
    def start_week(self) -> int:
        """Gets the start_week of this TaskInstance.

        Week that Task Instance Begins  # noqa: E501

        :return: The start_week of this TaskInstance.
        :rtype: int
        """
        return self._start_week

    @start_week.setter
    def start_week(self, start_week: int):
        """Sets the start_week of this TaskInstance.

        Week that Task Instance Begins  # noqa: E501

        :param start_week: The start_week of this TaskInstance.
        :type start_week: int
        """
        if start_week is not None and start_week < 1:  # noqa: E501
            raise ValueError("Invalid value for `start_week`, must be a value greater than or equal to `1`")  # noqa: E501

        self._start_week = start_week

    @property
    def assignee(self) -> str:
        """Gets the assignee of this TaskInstance.


        :return: The assignee of this TaskInstance.
        :rtype: str
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee: str):
        """Sets the assignee of this TaskInstance.


        :param assignee: The assignee of this TaskInstance.
        :type assignee: str
        """
        if assignee is not None and len(assignee) > 64:
            raise ValueError("Invalid value for `assignee`, length must be less than or equal to `64`")  # noqa: E501
        if assignee is not None and len(assignee) < 3:
            raise ValueError("Invalid value for `assignee`, length must be greater than or equal to `3`")  # noqa: E501

        self._assignee = assignee

    @property
    def status(self) -> str:
        """Gets the status of this TaskInstance.

        Task Status  # noqa: E501

        :return: The status of this TaskInstance.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this TaskInstance.

        Task Status  # noqa: E501

        :param status: The status of this TaskInstance.
        :type status: str
        """
        allowed_values = ["Open", "Completed", "Skipped"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def finish_date(self) -> date:
        """Gets the finish_date of this TaskInstance.

        Date Task was Completed or Skipped.  # noqa: E501

        :return: The finish_date of this TaskInstance.
        :rtype: date
        """
        return self._finish_date

    @finish_date.setter
    def finish_date(self, finish_date: date):
        """Sets the finish_date of this TaskInstance.

        Date Task was Completed or Skipped.  # noqa: E501

        :param finish_date: The finish_date of this TaskInstance.
        :type finish_date: date
        """

        self._finish_date = finish_date
